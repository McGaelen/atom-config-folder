(function() {
  var PlatformIOTerminal;

  PlatformIOTerminal = require('../lib/platformio-ide-terminal');

  describe("PlatformIOTerminal", function() {
    var activationPromise, ref, workspaceElement;
    ref = [], workspaceElement = ref[0], activationPromise = ref[1];
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      return activationPromise = atom.packages.activatePackage('platformio-ide-terminal');
    });
    return describe("when the platformio-ide-terminal:toggle event is triggered", function() {
      it("hides and shows the modal panel", function() {
        expect(workspaceElement.querySelector('.platformio-ide-terminal')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var platformIOTerminalElement, statusBar;
          expect(workspaceElement.querySelector('.platformio-ide-terminal')).toExist();
          platformIOTerminalElement = workspaceElement.querySelector('.platformio-ide-terminal');
          expect(platformIOTerminalElement).toExist();
          statusBar = atom.workspace.panelForItem(platformIOTerminalElement);
          expect(statusBar.isVisible()).toBe(true);
          atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
          return expect(statusBar.isVisible()).toBe(false);
        });
      });
      return it("hides and shows the view", function() {
        jasmine.attachToDOM(workspaceElement);
        expect(workspaceElement.querySelector('.platformio-ide-terminal')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var platformIOTerminalElement;
          platformIOTerminalElement = workspaceElement.querySelector('.platformio-ide-terminal');
          expect(platformIOTerminalElement).toBeVisible();
          atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
          return expect(platformIOTerminalElement).not.toBeVisible();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2dhZWxlbi8uYXRvbS9wYWNrYWdlcy9wbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbC9zcGVjL3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxrQkFBQSxHQUFxQixPQUFBLENBQVEsZ0NBQVI7O0VBT3JCLFFBQUEsQ0FBUyxvQkFBVCxFQUErQixTQUFBO0FBQzdCLFFBQUE7SUFBQSxNQUF3QyxFQUF4QyxFQUFDLHlCQUFELEVBQW1CO0lBRW5CLFVBQUEsQ0FBVyxTQUFBO01BQ1QsZ0JBQUEsR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLElBQUksQ0FBQyxTQUF4QjthQUNuQixpQkFBQSxHQUFvQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWQsQ0FBOEIseUJBQTlCO0lBRlgsQ0FBWDtXQUlBLFFBQUEsQ0FBUyw0REFBVCxFQUF1RSxTQUFBO01BQ3JFLEVBQUEsQ0FBRyxpQ0FBSCxFQUFzQyxTQUFBO1FBR3BDLE1BQUEsQ0FBTyxnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQiwwQkFBL0IsQ0FBUCxDQUFrRSxDQUFDLEdBQUcsQ0FBQyxPQUF2RSxDQUFBO1FBSUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFkLENBQXVCLGdCQUF2QixFQUF5QyxnQ0FBekM7UUFFQSxlQUFBLENBQWdCLFNBQUE7aUJBQ2Q7UUFEYyxDQUFoQjtlQUdBLElBQUEsQ0FBSyxTQUFBO0FBQ0gsY0FBQTtVQUFBLE1BQUEsQ0FBTyxnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQiwwQkFBL0IsQ0FBUCxDQUFrRSxDQUFDLE9BQW5FLENBQUE7VUFFQSx5QkFBQSxHQUE0QixnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQiwwQkFBL0I7VUFDNUIsTUFBQSxDQUFPLHlCQUFQLENBQWlDLENBQUMsT0FBbEMsQ0FBQTtVQUVBLFNBQUEsR0FBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQWYsQ0FBNEIseUJBQTVCO1VBQ1osTUFBQSxDQUFPLFNBQVMsQ0FBQyxTQUFWLENBQUEsQ0FBUCxDQUE2QixDQUFDLElBQTlCLENBQW1DLElBQW5DO1VBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFkLENBQXVCLGdCQUF2QixFQUF5QyxnQ0FBekM7aUJBQ0EsTUFBQSxDQUFPLFNBQVMsQ0FBQyxTQUFWLENBQUEsQ0FBUCxDQUE2QixDQUFDLElBQTlCLENBQW1DLEtBQW5DO1FBVEcsQ0FBTDtNQVpvQyxDQUF0QzthQXVCQSxFQUFBLENBQUcsMEJBQUgsRUFBK0IsU0FBQTtRQU83QixPQUFPLENBQUMsV0FBUixDQUFvQixnQkFBcEI7UUFFQSxNQUFBLENBQU8sZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsMEJBQS9CLENBQVAsQ0FBa0UsQ0FBQyxHQUFHLENBQUMsT0FBdkUsQ0FBQTtRQUlBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsZ0NBQXpDO1FBRUEsZUFBQSxDQUFnQixTQUFBO2lCQUNkO1FBRGMsQ0FBaEI7ZUFHQSxJQUFBLENBQUssU0FBQTtBQUVILGNBQUE7VUFBQSx5QkFBQSxHQUE0QixnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQiwwQkFBL0I7VUFDNUIsTUFBQSxDQUFPLHlCQUFQLENBQWlDLENBQUMsV0FBbEMsQ0FBQTtVQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsZ0NBQXpDO2lCQUNBLE1BQUEsQ0FBTyx5QkFBUCxDQUFpQyxDQUFDLEdBQUcsQ0FBQyxXQUF0QyxDQUFBO1FBTEcsQ0FBTDtNQWxCNkIsQ0FBL0I7SUF4QnFFLENBQXZFO0VBUDZCLENBQS9CO0FBUEEiLCJzb3VyY2VzQ29udGVudCI6WyJQbGF0Zm9ybUlPVGVybWluYWwgPSByZXF1aXJlICcuLi9saWIvcGxhdGZvcm1pby1pZGUtdGVybWluYWwnXG5cbiMgVXNlIHRoZSBjb21tYW5kIGB3aW5kb3c6cnVuLXBhY2thZ2Utc3BlY3NgIChjbWQtYWx0LWN0cmwtcCkgdG8gcnVuIHNwZWNzLlxuI1xuIyBUbyBydW4gYSBzcGVjaWZpYyBgaXRgIG9yIGBkZXNjcmliZWAgYmxvY2sgYWRkIGFuIGBmYCB0byB0aGUgZnJvbnQgKGUuZy4gYGZpdGBcbiMgb3IgYGZkZXNjcmliZWApLiBSZW1vdmUgdGhlIGBmYCB0byB1bmZvY3VzIHRoZSBibG9jay5cblxuZGVzY3JpYmUgXCJQbGF0Zm9ybUlPVGVybWluYWxcIiwgLT5cbiAgW3dvcmtzcGFjZUVsZW1lbnQsIGFjdGl2YXRpb25Qcm9taXNlXSA9IFtdXG5cbiAgYmVmb3JlRWFjaCAtPlxuICAgIHdvcmtzcGFjZUVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpXG4gICAgYWN0aXZhdGlvblByb21pc2UgPSBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZSgncGxhdGZvcm1pby1pZGUtdGVybWluYWwnKVxuXG4gIGRlc2NyaWJlIFwid2hlbiB0aGUgcGxhdGZvcm1pby1pZGUtdGVybWluYWw6dG9nZ2xlIGV2ZW50IGlzIHRyaWdnZXJlZFwiLCAtPlxuICAgIGl0IFwiaGlkZXMgYW5kIHNob3dzIHRoZSBtb2RhbCBwYW5lbFwiLCAtPlxuICAgICAgIyBCZWZvcmUgdGhlIGFjdGl2YXRpb24gZXZlbnQgdGhlIHZpZXcgaXMgbm90IG9uIHRoZSBET00sIGFuZCBubyBwYW5lbFxuICAgICAgIyBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICBleHBlY3Qod29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhdGZvcm1pby1pZGUtdGVybWluYWwnKSkubm90LnRvRXhpc3QoKVxuXG4gICAgICAjIFRoaXMgaXMgYW4gYWN0aXZhdGlvbiBldmVudCwgdHJpZ2dlcmluZyBpdCB3aWxsIGNhdXNlIHRoZSBwYWNrYWdlIHRvIGJlXG4gICAgICAjIGFjdGl2YXRlZC5cbiAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2ggd29ya3NwYWNlRWxlbWVudCwgJ3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsOnRvZ2dsZSdcblxuICAgICAgd2FpdHNGb3JQcm9taXNlIC0+XG4gICAgICAgIGFjdGl2YXRpb25Qcm9taXNlXG5cbiAgICAgIHJ1bnMgLT5cbiAgICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXRmb3JtaW8taWRlLXRlcm1pbmFsJykpLnRvRXhpc3QoKVxuXG4gICAgICAgIHBsYXRmb3JtSU9UZXJtaW5hbEVsZW1lbnQgPSB3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbCcpXG4gICAgICAgIGV4cGVjdChwbGF0Zm9ybUlPVGVybWluYWxFbGVtZW50KS50b0V4aXN0KClcblxuICAgICAgICBzdGF0dXNCYXIgPSBhdG9tLndvcmtzcGFjZS5wYW5lbEZvckl0ZW0ocGxhdGZvcm1JT1Rlcm1pbmFsRWxlbWVudClcbiAgICAgICAgZXhwZWN0KHN0YXR1c0Jhci5pc1Zpc2libGUoKSkudG9CZSB0cnVlXG4gICAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2ggd29ya3NwYWNlRWxlbWVudCwgJ3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsOnRvZ2dsZSdcbiAgICAgICAgZXhwZWN0KHN0YXR1c0Jhci5pc1Zpc2libGUoKSkudG9CZSBmYWxzZVxuXG4gICAgaXQgXCJoaWRlcyBhbmQgc2hvd3MgdGhlIHZpZXdcIiwgLT5cbiAgICAgICMgVGhpcyB0ZXN0IHNob3dzIHlvdSBhbiBpbnRlZ3JhdGlvbiB0ZXN0IHRlc3RpbmcgYXQgdGhlIHZpZXcgbGV2ZWwuXG5cbiAgICAgICMgQXR0YWNoaW5nIHRoZSB3b3Jrc3BhY2VFbGVtZW50IHRvIHRoZSBET00gaXMgcmVxdWlyZWQgdG8gYWxsb3cgdGhlXG4gICAgICAjIGB0b0JlVmlzaWJsZSgpYCBtYXRjaGVycyB0byB3b3JrLiBBbnl0aGluZyB0ZXN0aW5nIHZpc2liaWxpdHkgb3IgZm9jdXNcbiAgICAgICMgcmVxdWlyZXMgdGhhdCB0aGUgd29ya3NwYWNlRWxlbWVudCBpcyBvbiB0aGUgRE9NLiBUZXN0cyB0aGF0IGF0dGFjaCB0aGVcbiAgICAgICMgd29ya3NwYWNlRWxlbWVudCB0byB0aGUgRE9NIGFyZSBnZW5lcmFsbHkgc2xvd2VyIHRoYW4gdGhvc2Ugb2ZmIERPTS5cbiAgICAgIGphc21pbmUuYXR0YWNoVG9ET00od29ya3NwYWNlRWxlbWVudClcblxuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXRmb3JtaW8taWRlLXRlcm1pbmFsJykpLm5vdC50b0V4aXN0KClcblxuICAgICAgIyBUaGlzIGlzIGFuIGFjdGl2YXRpb24gZXZlbnQsIHRyaWdnZXJpbmcgaXQgY2F1c2VzIHRoZSBwYWNrYWdlIHRvIGJlXG4gICAgICAjIGFjdGl2YXRlZC5cbiAgICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2ggd29ya3NwYWNlRWxlbWVudCwgJ3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsOnRvZ2dsZSdcblxuICAgICAgd2FpdHNGb3JQcm9taXNlIC0+XG4gICAgICAgIGFjdGl2YXRpb25Qcm9taXNlXG5cbiAgICAgIHJ1bnMgLT5cbiAgICAgICAgIyBOb3cgd2UgY2FuIHRlc3QgZm9yIHZpZXcgdmlzaWJpbGl0eVxuICAgICAgICBwbGF0Zm9ybUlPVGVybWluYWxFbGVtZW50ID0gd29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhdGZvcm1pby1pZGUtdGVybWluYWwnKVxuICAgICAgICBleHBlY3QocGxhdGZvcm1JT1Rlcm1pbmFsRWxlbWVudCkudG9CZVZpc2libGUoKVxuICAgICAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoIHdvcmtzcGFjZUVsZW1lbnQsICdwbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbDp0b2dnbGUnXG4gICAgICAgIGV4cGVjdChwbGF0Zm9ybUlPVGVybWluYWxFbGVtZW50KS5ub3QudG9CZVZpc2libGUoKVxuIl19
