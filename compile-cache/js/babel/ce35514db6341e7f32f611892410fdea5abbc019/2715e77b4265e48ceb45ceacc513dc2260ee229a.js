Object.defineProperty(exports, '__esModule', {
  value: true
});

var _atom = require('atom');

var _utils = require('./utils');

'use babel';

exports['default'] = {

  config: {
    expandedWidth: {
      title: 'Focused Pane Width',
      description: 'Sets the Percentage between 0 and 100 of how much the focused pane will grow',
      type: 'integer',
      'default': 94,
      minimum: 1,
      maximum: 100
    }
  },

  subscriptions: null,
  ActivePane: null,
  FollowObserver: null,
  modifiedPanes: [],

  activate: function activate(state) {
    var _this = this;

    this.subscriptions = new _atom.CompositeDisposable();

    this.subscriptions.add(atom.commands.add('atom-workspace', {
      'hey-pane:toggle-focus-of-active-pane': function heyPaneToggleFocusOfActivePane() {
        return _this.toggleFocus();
      },
      'hey-pane:toggle-follow-mode': function heyPaneToggleFollowMode() {
        return _this.followMe();
      }
    }));
  },

  deactivate: function deactivate() {
    this.subscriptions.dispose();

    if (this.FollowObserver != null) this.FollowObserver.dispose();
  },

  // Activate/deactivate follow mode
  followMe: function followMe() {
    var _this2 = this;

    if (this.FollowObserver != null) {
      this.FollowObserver.dispose();
      this.FollowObserver = null;
    } else {
      this.FollowObserver = atom.workspace.onDidStopChangingActivePaneItem(function (pane) {
        _this2.setAutoFocus();
      });
    }
  },

  setAutoFocus: function setAutoFocus() {
    if (this.ActivePane != null) {
      this.undoFocus();
    }
    this.doFocus();
  },

  // Toggle Focus of active pane
  toggleFocus: function toggleFocus() {
    if (this.ActivePane != null) {
      this.undoFocus();
    } else {
      this.doFocus();
    }
  },

  doFocus: function doFocus() {
    var _this3 = this;

    this.ActivePane = this.getActivePane();
    this.ActivePane.classList.add('hey-pane-focus');

    var expandedWidth = atom.config.get('hey-pane.expandedWidth') / 100;
    var collapsedWidth = 1 - expandedWidth;

    var recursiveSet = function recursiveSet(node) {
      if (node.parentNode.nodeName === 'ATOM-PANE-AXIS') {
        _this3.saveElementStateAndSetFlex(node, expandedWidth);
        (0, _utils.getSiblings)(node).filter(function (pane) {
          return pane.nodeName !== 'ATOM-PANE-RESIZE-HANDLE';
        }).forEach(function (pane) {
          _this3.saveElementStateAndSetFlex(pane, collapsedWidth);
        });

        if (node.parentNode.parentNode.nodeName !== 'ATOM-PANE-CONTAINER') {
          recursiveSet(node.parentNode);
        }
      }
    };

    recursiveSet(this.ActivePane);
  },

  undoFocus: function undoFocus() {
    this.ActivePane.classList.remove('hey-pane-focus');
    this.ActivePane = null;
    this.restorePanes();
    this.emptyPaneStates();
  },

  saveElementStateAndSetFlex: function saveElementStateAndSetFlex(el, newFlexValue) {
    var oldFlexValue = el.style.flexGrow;
    this.modifiedPanes.push({ el: el, oldFlexValue: oldFlexValue });
    el.style.flexGrow = newFlexValue;
  },

  restorePanes: function restorePanes() {
    var Container = this.getPanesContainer();
    this.modifiedPanes.forEach(function (pane) {
      if (Container.contains(pane.el)) {
        pane.el.style.flexGrow = pane.oldFlexValue;
      }
    });
  },

  emptyPaneStates: function emptyPaneStates() {
    this.modifiedPanes = [];
  },

  getPanesContainer: function getPanesContainer() {
    var View = atom.views.getView(atom.workspace);
    return View.querySelector('.panes');
  },

  getActivePane: function getActivePane() {
    var View = atom.views.getView(atom.workspace);
    return View.querySelector('.pane.active');
  }

};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,