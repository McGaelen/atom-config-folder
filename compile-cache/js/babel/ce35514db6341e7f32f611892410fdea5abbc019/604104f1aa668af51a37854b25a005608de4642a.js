Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _ignore = require("ignore");

var _ignore2 = _interopRequireDefault(_ignore);

var _atom = require("atom");

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

"use babel";

var oPackageConfig = undefined,
    fActivate = undefined,
    fDeactivate = undefined,
    _oDisposables = undefined,
    _oAtomIgnoreFileDisposables = undefined,
    _oMutationObserver = undefined,
    _bIsWindowsPlatform = document.body.classList.contains("platform-win32"),
    _oAtomIgnoreFiles = undefined,
    _fUpdate = undefined,
    _fApply = undefined,
    _fTreeViewHasMutated = undefined,
    _fProjectChangedPaths = undefined,
    _fGetCurrentState = undefined,
    _fAddAtomIgnoreFiles = undefined,
    _fNormalizePath = undefined,
    _fHandleIgnoreFile = undefined,
    _fUnhideParents = undefined;

exports.config = oPackageConfig = {
    "enabled": {
        "type": "boolean",
        "default": true
    },
    "ignoreFileName": {
        "type": "string",
        "default": ".atomignore"
    }
};

exports.activate = fActivate = function () {
    _oDisposables && _oDisposables.dispose();
    _oDisposables = new _atom.CompositeDisposable();

    _oDisposables.add(atom.commands.add("atom-workspace", {
        "tree-ignore:toggle": function treeIgnoreToggle() {
            _fApply(!atom.config.get("tree-ignore.enabled"));
        },
        "tree-ignore:enable": _fApply.bind(null, true),
        "tree-ignore:disable": _fApply.bind(null, false)
    }));

    _oDisposables.add(atom.commands.add(".platform-win32, .platform-linux, .platform-darwin", {
        "tree-view:toggle": _fUpdate.bind(null)
    }));

    _oMutationObserver = new MutationObserver(_fTreeViewHasMutated);

    atom.packages.onDidActivateInitialPackages(function () {
        _oDisposables.add(atom.project.onDidChangePaths(_fProjectChangedPaths));

        _fProjectChangedPaths();

        atom.config.observe("tree-ignore.enabled", function (bNewValue) {
            if (bNewValue !== atom.config.get("tree-ignore.enabled")) {
                _fApply(bNewValue);
            }
        });

        _fUpdate();
    });
};

exports.deactivate = fDeactivate = function () {
    _oDisposables && _oDisposables.dispose();
    _oAtomIgnoreFileDisposables && _oAtomIgnoreFileDisposables.dispose();
    _oMutationObserver.disconnect();
};

_fGetCurrentState = function () {
    return atom.config.get("tree-ignore.enabled");
};

_fApply = function (bValue) {
    atom.config.set("tree-ignore.enabled", bValue);
    _fUpdate();
};

_fUpdate = function () {
    var oIgnore = undefined,
        oIgnoredItems = {},
        sProjectRoot = "",
        bHandleProject = undefined,
        bState = _fGetCurrentState();

    if (bState && document.querySelector(".tree-view")) {
        _oMutationObserver.observe(document.querySelector(".tree-view"), {
            "childList": true,
            "subtree": true
        });
    } else {
        _oMutationObserver.disconnect();
    }

    (0, _jquery2["default"])(atom.views.getView(atom.workspace)).find(".tree-view li.entry .name").each(function () {
        var sPath = undefined,
            $this = undefined,
            bFiltered = false;

        if (sPath = ($this = (0, _jquery2["default"])(this)).data("path")) {
            var $parent = $this.parents("li.entry").first();

            sPath = _fNormalizePath(sPath);
            if ($parent.hasClass("directory")) {
                sPath += "/";
            }
            if ($parent.hasClass("project-root")) {
                sProjectRoot = sPath;
                oIgnore = _fHandleIgnoreFile(sProjectRoot);
                bHandleProject = oIgnore != null;
            }
            if (oIgnore != null) {
                sPath = sPath.substring(sProjectRoot.length);
                bFiltered = oIgnore.filter([sPath]).length === 0;
                if (bFiltered) {
                    if (sPath.endsWith("/")) {
                        oIgnoredItems[sPath] = $parent;
                    }
                } else {
                    _fUnhideParents(oIgnoredItems, sPath);
                }
            }
            $parent.toggleClass("tree-ignore-element", bState && bHandleProject && bFiltered);
        }
    });
};

_fTreeViewHasMutated = function () {
    _fUpdate();
};

_fProjectChangedPaths = function () {
    _fAddAtomIgnoreFiles();
    _fUpdate();
};

_fAddAtomIgnoreFiles = function () {
    var sIgnoreFileName = atom.config.get("tree-ignore.ignoreFileName");

    _oAtomIgnoreFileDisposables && _oAtomIgnoreFileDisposables.dispose();
    _oAtomIgnoreFileDisposables = new _atom.CompositeDisposable();
    _oAtomIgnoreFiles = {};

    atom.project.getDirectories().forEach(function (oDirectory) {
        var oIgnoreFile = oDirectory.getFile(sIgnoreFileName);

        _oAtomIgnoreFiles[_fNormalizePath(oDirectory.getPath() + "/")] = oIgnoreFile;
        _oAtomIgnoreFileDisposables.add(oIgnoreFile.onDidChange(_fUpdate));
    });
};

_fNormalizePath = function (sPath) {
    if (_bIsWindowsPlatform) {
        return sPath.replace(/\\/g, "/");
    }
    return sPath;
};

_fHandleIgnoreFile = function (sPath) {
    var sIgnoreFile = _oAtomIgnoreFiles && _oAtomIgnoreFiles[sPath] ? _oAtomIgnoreFiles[sPath] : null;

    if (sIgnoreFile == null) {
        // New root / project path, look if it has an ignore file
        return null; // Don't handle this project
    }
    if (!sIgnoreFile.existsSync()) {
        return null; // Removed, unhide everything
    }

    return (0, _ignore2["default"])().addIgnoreFile(sIgnoreFile.getPath());
};

_fUnhideParents = function (oIgnoredItems, sPath) {
    var getParent = function getParent(sChildPath) {
        if (sChildPath.endsWith("/")) {
            return sChildPath.replace(/[^\/]*\/$/, "");
        }
        return sChildPath.replace(/\/.*?$/, "/");
    };
    var sParent = sPath,
        oItem = undefined;

    while (sParent.includes("/")) {
        sParent = getParent(sParent);
        oItem = oIgnoredItems[sParent];
        if (oItem != null) {
            oItem.removeClass("tree-ignore-element");
        }
    }
};

exports.config = oPackageConfig;
exports.activate = fActivate;
exports.deactivate = fDeactivate;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/gaelen/.atom/packages/tree-ignore/lib/tree-ignore.js
