// Some docs
// http://www.html5rocks.com/en/tutorials/webcomponents/customelements/ (look at lifecycle callback methods)
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TsView = (function (_super) {
    __extends(TsView, _super);
    function TsView() {
        _super.apply(this, arguments);
    }
    TsView.prototype.createdCallback = function () {
        var preview = this.innerText;
        this.innerText = "";
        // Based on markdown editor
        // https://github.com/atom/markdown-preview/blob/2bcbadac3980f1aeb455f7078bd1fdfb4e6fe6b1/lib/renderer.coffee#L111
        var editorElement = (this.editorElement = document.createElement("atom-text-editor"));
        editorElement.setAttributeNode(document.createAttribute("gutter-hidden"));
        editorElement.removeAttribute("tabindex"); // make read-only
        var editor = (this.editor = editorElement.getModel());
        editor.getDecorations({ class: "cursor-line", type: "line" })[0].destroy(); // remove the default selection of a line in each editor
        editor.setText(preview);
        var grammar = atom.grammars.grammarForScopeName("source.tsx");
        editor.setGrammar(grammar);
        editor.setSoftWrapped(true);
        this.appendChild(editorElement);
    };
    // API
    TsView.prototype.text = function (text) {
        this.editor.setText(text);
    };
    return TsView;
})(HTMLElement);
exports.TsView = TsView;
;
document.registerElement("ts-view", TsView);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZTovLy9DOi9Vc2Vycy9lZjhsai8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9jb21wb25lbnRzL3RzVmlldy50cyIsInNvdXJjZXMiOlsiZmlsZTovLy9DOi9Vc2Vycy9lZjhsai8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9jb21wb25lbnRzL3RzVmlldy50cyJdLCJuYW1lcyI6WyJUc1ZpZXciLCJUc1ZpZXcuY29uc3RydWN0b3IiLCJUc1ZpZXcuY3JlYXRlZENhbGxiYWNrIiwiVHNWaWV3LnRleHQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWiw0R0FBNEc7Ozs7Ozs7QUFFNUcsSUFBYSxNQUFNO0lBQVNBLFVBQWZBLE1BQU1BLFVBQW9CQTtJQUF2Q0EsU0FBYUEsTUFBTUE7UUFBU0MsOEJBQVdBO0lBMEJ2Q0EsQ0FBQ0E7SUF2QkNELGdDQUFlQSxHQUFmQTtRQUNFRSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFBQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsRUFBRUEsQ0FBQUE7UUFJbkJBLEFBRkFBLDJCQUEyQkE7UUFDM0JBLGtIQUFrSEE7WUFDOUdBLGFBQWFBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDckZBLGFBQWFBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDekVBLGFBQWFBLENBQUNBLGVBQWVBLENBQUNBLFVBQVVBLENBQUNBLEVBQUNBLGlCQUFpQkE7UUFDM0RBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEdBQVNBLGFBQWNBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUFBO1FBQzVEQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxFQUFDQSxLQUFLQSxFQUFFQSxhQUFhQSxFQUFFQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxFQUFDQSx3REFBd0RBO1FBQ2pJQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQTtRQUN2QkEsSUFBSUEsT0FBT0EsR0FBU0EsSUFBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFBQTtRQUNwRUEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQUE7UUFDMUJBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLENBQUFBO1FBRTNCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFBQTtJQUNqQ0EsQ0FBQ0E7SUFFREYsTUFBTUE7SUFDTkEscUJBQUlBLEdBQUpBLFVBQUtBLElBQVlBO1FBQ2ZHLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUFBO0lBQzNCQSxDQUFDQTtJQUNISCxhQUFDQTtBQUFEQSxDQUFDQSxBQTFCRCxFQUE0QixXQUFXLEVBMEJ0QztBQTFCWSxjQUFNLEdBQU4sTUEwQlosQ0FBQTtBQUVELENBQUM7QUFBTSxRQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNvbWUgZG9jc1xuLy8gaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvd2ViY29tcG9uZW50cy9jdXN0b21lbGVtZW50cy8gKGxvb2sgYXQgbGlmZWN5Y2xlIGNhbGxiYWNrIG1ldGhvZHMpXG5cbmV4cG9ydCBjbGFzcyBUc1ZpZXcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvclxuICBjcmVhdGVkQ2FsbGJhY2soKSB7XG4gICAgdmFyIHByZXZpZXcgPSB0aGlzLmlubmVyVGV4dFxuICAgIHRoaXMuaW5uZXJUZXh0ID0gXCJcIlxuXG4gICAgLy8gQmFzZWQgb24gbWFya2Rvd24gZWRpdG9yXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F0b20vbWFya2Rvd24tcHJldmlldy9ibG9iLzJiY2JhZGFjMzk4MGYxYWViNDU1ZjcwNzhiZDFmZGZiNGU2ZmU2YjEvbGliL3JlbmRlcmVyLmNvZmZlZSNMMTExXG4gICAgdmFyIGVkaXRvckVsZW1lbnQgPSAodGhpcy5lZGl0b3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF0b20tdGV4dC1lZGl0b3JcIikpXG4gICAgZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShcImd1dHRlci1oaWRkZW5cIikpXG4gICAgZWRpdG9yRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSAvLyBtYWtlIHJlYWQtb25seVxuICAgIHZhciBlZGl0b3IgPSAodGhpcy5lZGl0b3IgPSAoPGFueT5lZGl0b3JFbGVtZW50KS5nZXRNb2RlbCgpKVxuICAgIGVkaXRvci5nZXREZWNvcmF0aW9ucyh7Y2xhc3M6IFwiY3Vyc29yLWxpbmVcIiwgdHlwZTogXCJsaW5lXCJ9KVswXS5kZXN0cm95KCkgLy8gcmVtb3ZlIHRoZSBkZWZhdWx0IHNlbGVjdGlvbiBvZiBhIGxpbmUgaW4gZWFjaCBlZGl0b3JcbiAgICBlZGl0b3Iuc2V0VGV4dChwcmV2aWV3KVxuICAgIHZhciBncmFtbWFyID0gKDxhbnk+YXRvbSkuZ3JhbW1hcnMuZ3JhbW1hckZvclNjb3BlTmFtZShcInNvdXJjZS50c3hcIilcbiAgICBlZGl0b3Iuc2V0R3JhbW1hcihncmFtbWFyKVxuICAgIGVkaXRvci5zZXRTb2Z0V3JhcHBlZCh0cnVlKVxuXG4gICAgdGhpcy5hcHBlbmRDaGlsZChlZGl0b3JFbGVtZW50KVxuICB9XG5cbiAgLy8gQVBJXG4gIHRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5lZGl0b3Iuc2V0VGV4dCh0ZXh0KVxuICB9XG59XG5cbjsoPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50KFwidHMtdmlld1wiLCBUc1ZpZXcpXG4iXX0=